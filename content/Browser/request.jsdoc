Request : Object

Request is used to describe an request to a server.
Use with %%/Window#fetch|fetch()%% to perform the request and 
get a %%/Response|Response%%.

Request, fetch(), and Response are a new, low level replacement for
%%/XMLHttpRequest|XMLHttpRequest%%.

Spec:
https://fetch.spec.whatwg.org/#request-class

----
new Request(url : String, [init : { \
  body : Object /* The data to send with the request.  Must be a %%/Blob|Blob%%, \
                   BufferSource, %%/FormData|FormData%%, %%/String|String%%, or \
                   %%/URLSearchParams|URLSearchParams%%. */, \
  cache : String /* See the %%#cache|cache%% property for the valid values. */, \
  credentials : String /* See the %%#credentials|credentials%% property for the valid values. */, \
  headers : Object /* The http headers to send with the request. This will be passed \
                      to the %%/Headers|Headers%% constructor. */, \
  method : String /* The http method such as **'GET'**, **'POST'**, **'DELETE'**. */, \
  mode : String /* See the %%#mode|mode%% property for the valid values. */ \
}]) : Request

<example>
var request = new Request('/');
fetch(request).then(function(response) {
  return response.text();
}).then(function(text) {
  console.log(text.substring(0, 30));
});
</example>

----
new Request(request : Request, [init : Object]) : Request

----
instance.bodyUsed : Boolean

ReadOnly:
true

----
instance.cache : String

Will be one of:

**'default'**, 
**'force-cache'**, 
**'no-cache'**, 
**'no-store'**, 
**'only-if-cached'**,
**'reload'**.

ReadOnly:
true

----
instance.context : String

Will be one of:

**'audio'**, 
**'beacon'**, 
**'cspreport'**, 
**'download'**, 
**'embed'**, 
**'eventsource'**, 
**'favicon'**, 
**'fetch'**,
**'font'**, 
**'form'**, 
**'frame'**, 
**'hyperlink'**, 
**'iframe'**, 
**'image'**, 
**'imageset'**, 
**'import'**,
**'internal'**, 
**'location'**, 
**'manifest'**, 
**'object'**, 
**'ping'**, 
**'plugin'**, 
**'prefetch'**, 
**'script'**,
**'serviceworker'**, 
**'sharedworker'**, 
**'subresource'**, 
**'style'**, 
**'track'**, 
**'video'**, 
**'worker'**,
**'xmlhttprequest'**, 
**'xslt'**.

ReadOnly:
true

----
instance.credentials : String

Will be one of:

**'include'**,
**'omit'**, 
**'same-origin'**.

ReadOnly:
true

----
instance.headers : Headers

ReadOnly:
true

----
instance.method : String

ReadOnly:
true

----
instance.mode : String

Will be one of:

**'same-origin'**, 
**'no-cors'**, 
**'cors'**. 

ReadOnly:
true

----
instance.referrer : String

ReadOnly:
true

----
instance.url : String

ReadOnly:
true

----
prototype.clone() : Request

----
prototype.arrayBuffer() : Promise<ArrayBuffer>

Returns a Promise to the body of the request as an ArrayBuffer.

<example>
var request = new Request('/', {
  method: 'POST',
  body: 'text to send to server' 
});

request.arrayBuffer().then(function(arrayBuffer) {
  var uint8Array = new Uint8Array(arrayBuffer);
  for (var i = 0; i < uint8Array.length; i++) {
    console.log(String.fromCharCode(uint8Array[i]));
  }
});
</example>

----
prototype.blob() : Promise<Blob>

Returns a Promise to the body of the request as a Blob.

<example>
var request = new Request('/', {
  method: 'POST',
  body: 'text to send to server' 
});

request.blob().then(function(blob) {
  var reader = new FileReader();

  reader.onload = function() {
    console.log(reader.result);
  };

  reader.readAsText(blob);
});
</example>

----
prototype.formData() : Promise<FormData>

Returns a Promise to the body of the request as a FormData.

----
prototype.json() : Promise<Object>

Parses the body of the request and returns a Promise with the result.

<example>
var request = new Request('/', {
  method: 'POST',
  body: '{ "foo": "1", "bar": 2 }' 
});

request.json().then(function(json) { 
  console.log(json.foo);
  console.log(json.bar);
});
</example>

----
prototype.text() : Promise<String>

Returns a Promise to the body of the request.

<example>
var request = new Request('/', {
  method: 'POST',
  body: 'text to send to server' 
});

request.text().then(function(text) { 
  console.log(text);
});
</example>
