Window : Global

Window is the global object in the browser that represents the
browser window for the page.  The window object itself
is available through the %%#window|**window**%% property and all 
properties on the Window are available directly in scripts.
The Window object is also available as **this** in the root scope of 
a script (ie, outside of any %%/Function|Function%%).

Spec:
http://dev.w3.org/html5/spec/Overview.html#the-window-object

----
instance.window : Window

Returns the global object for the browser. Also available 
through the %%#self|**self**%% property and through **this**
in the root scope.

<htmlexample>
<script>
  // At the root scope, 'this' is the window.
  console.log(this === window);
  console.log(window === self);
  console.log(window === window.window);
  console.log(window === window.self);
</script>
</htmlexample>

ReadOnly:
true

Spec:
http://dev.w3.org/html5/spec/Overview.html#dom-window

----
instance.self : Window

Returns the global object for the browser. Also available 
through the %%#window|**window**%% property and through **this**
in the root scope.

<htmlexample>
<script>
  // At the root scope, 'this' is the window.
  console.log(this === window);
  console.log(window === self);
  console.log(window === window.window);
  console.log(window === window.self);
</script>
</htmlexample>

ReadOnly:
true

Spec:
http://dev.w3.org/html5/spec/Overview.html#dom-self

----
instance.crypto : Crypto

Spec:
http://www.w3.org/TR/WebCryptoAPI/#dfn-Crypto

----
instance.document : Document

Returns the document for this window. 

<htmlexample>
<div>Hello World</div>
<script>
  console.log(document.body.firstChild.textContent);
</script>
</htmlexample>


ReadOnly:
true

Spec:
http://dev.w3.org/html5/spec/Overview.html#dom-document-0

----
instance.name : String


Spec:
http://dev.w3.org/html5/spec/Overview.html#dom-name

----
instance.location : Location

Describes the url of the current page. See %%/Location|Location%% for 
more details.

<htmlexample>
<script>
  console.log(location.href);
  console.log(location.protocol);
  console.log(location.hostname);
  console.log(location.pathname);
  console.log(location.search);
  console.log(location.hash);
</script>
</htmlexample>

ReadOnly:
true

Spec:
http://dev.w3.org/html5/spec/Overview.html#dom-location

----
instance.history : History

Represents the user's browser history and allows the page
to manipulate the history by adding pages or navigating between
pages. See %%/History|History%% for more details.

<htmlexample>
<button onclick='pushState()'>Push State</button><br>
<button onclick='replaceState()'>Replace State</button><br>
<button onclick='history.back()'>Back</button><br>
<button onclick='history.forward()'>Forward</button><br>
<input id='goAmount' value='-1'><button onclick='go()'>Go</button>
<div>
  history.state = <span id='historyState'></span>
</div>
<div>
  history.length = <span id='historyLength'></span>
</div>
<div>
  href = <span id='locationHref'></span>
</div>
<script>
  var onStateChange = function() {
    document.getElementById('historyState').textContent = history.state;
    document.getElementById('historyLength').textContent = history.length;
    document.getElementById('locationHref').textContent = location.href;
  };

  window.onpopstate = onStateChange;

  onStateChange();

  var pushState = function() {
    var newState = (history.state || 0) + 1;
    history.pushState(newState, 'Pushed: ' + newState, '/History?state=' + newState);
    onStateChange();
  };

  var replaceState = function() {
    var newState = (history.state || 0) + 1;
    history.replaceState(newState, 'Replaced: ' + newState, '/History?state=' + newState);
    onStateChange();
  };

  var go = function() {
    var amount = +document.getElementById('goAmount').value;
    history.go(amount);
  };
</script>
</htmlexample>

ReadOnly:
true

Spec:
http://dev.w3.org/html5/spec/Overview.html#dom-history

----
instance.status : String

----
instance.localStorage : Storage

**localStorage** allows saving data in the web browser
that can be retrieved in future views of the web page.
The data is saved across browser sessions and computer
reboots.
See also %%#sessionStorage|**sessionStorage**%% and
%%/Storage|Storage%% for more details.

<htmlexample>
<input id='tosave'>
<button onclick='save()'>Save</button>
<div id='lastsaved'></div>
<script>
  var lastSavedElement = document.getElementById('lastsaved');
  lastSavedElement.textContent = localStorage['saved'];

  var save = function() {
    var value = document.getElementById('tosave').value;
    localStorage['saved'] = value
    lastSavedElement.textContent = value;
  };
</script>
</htmlexample>

ReadOnly:
true

----
instance.sessionStorage : Storage

**sessionStorage** allows saving data in the web browser
that can be retrieved in future views of the web page.
The data is only saved for the current session, that is until 
the user closes the web browser.
See also %%#localStorage|**localStorage**%% and
%%/Storage|Storage%% for more details.

<htmlexample>
<input id='tosave'>
<button onclick='save()'>Save</button>
<div id='lastsaved'></div>
<script>
  var lastSavedElement = document.getElementById('lastsaved');
  lastSavedElement.textContent = sessionStorage['saved'];

  var save = function() {
    var value = document.getElementById('tosave').value;
    sessionStorage['saved'] = value
    lastSavedElement.textContent = value;
  };
</script>
</htmlexample>

ReadOnly:
true

----
instance.navigator : Navigator

----
prototype.btoa(encoded : String) : String

Converts a unicode/binary string into an ascii encoded string 
(%%http://en.wikipedia.org/wiki/Base64|base64%%). 
See also %%#atob|**atob()**%%.

<htmlexample>
<script>
  var string = 'Hello world!';
  var base64 = btoa(string);
  var decoded = atob(base64);

  console.log(base64);
  console.log(decoded);
</script>
</htmlexample>

Spec:
http://www.whatwg.org/specs/web-apps/current-work/#dom-windowbase64-btoa

----
prototype.atob(unencoded : String) : String

Converts an ascii encoded string 
(%%http://en.wikipedia.org/wiki/Base64|base64%%)
into a unicode/binary string.
See also %%#btob|**btob()**%%.

<htmlexample>
<script>
  var string = 'Hello world!';
  var base64 = btoa(string);
  var decoded = atob(base64);

  console.log(base64);
  console.log(decoded);
</script>
</htmlexample>


Spec:
http://www.whatwg.org/specs/web-apps/current-work/#dom-windowbase64-atob

----
prototype.setTimeout(callback : Function, [timeout = 0: Number, [...]]) : Number

Schedules **callback** to be called once after **timeout** milliseconds. Any extra
parameters after **timeout** are passed to **callback**.

Returns a unique handle that can be passed to %%#clearTimeout|**clearTimeout()**%% 
to stop **callback** from being called.

See also %%#setInterval|**setInterval()**%% and %%#requestAnimationFrame|**requestAnimationFrame()**%%.

<htmlexample>
<script>
  var handle = setTimeout(function(parameter1, parameter2) {
    console.log('in callback');
    console.log('  parameter1=' + parameter1);
    console.log('  parameter2=' + parameter2);
  }, 1000, 'foo', 'bar');
  console.log('after setTimeout');
</script>
</htmlexample>

Spec:
http://www.whatwg.org/specs/web-apps/current-work/#dom-windowtimers-settimeout

----
prototype.setTimeout(callback : String, [timeout = 0: Number, [...]]) : Number

Same as %%#setTimeout_Function_Number_dotdotdot|setTimeout()%% where the 
**callback** string is passed to %%/Global#eval|eval%% when the time has elapsed.

Spec:
http://www.whatwg.org/specs/web-apps/current-work/#dom-windowtimers-settimeout

----
prototype.clearTimeout(handle : Number) : undefined

Stops a timeout from running.  **handle** is the value returned by %%#setTimeout|**setTimeout()**%%.

<htmlexample>
<script>
  var handle1 = setTimeout(function() {
    console.log('in timeout callback 1');
  }, 100);

  var handle2 = setTimeout(function() {
    console.log('in timeout callback 2');
  }, 100);

  clearTimeout(handle1);
</script>
</htmlexample>

----
prototype.requestAnimationFrame(callback(time : Number) : undefined) : Number

Schedules **callback** to be called before the next time the browser renders a 
frame to the screen. Must be called each time you'd like to schedule another 
frame.

The **time** parameter to callback is the number of milliseconds since the 
page loaded.

Returns a unique handle that can be passed to %%#cancelAnimationFrame|**cancelAnimationFrame()**%% 
to stop **callback** from being called.

<htmlexample>
<canvas id='canvas'></canvas>
<script>
  var canvas = document.getElementById('canvas');
  var context = canvas.getContext('2d');

  var callback = function(time) {
    context.clearRect(0, 0, canvas.width, canvas.height);
    context.fillRect(10, 10, 30 * (Math.sin(time / 1000) + 1), 30);
    context.fillText(time, 10, 75);

    requestAnimationFrame(callback);
  };

  requestAnimationFrame(callback);
</script>
</htmlexample>

----
prototype.cancelAnimationFrame(handle : Number) : undefined

Stops an animation frame callback from running.  **handle** is the 
value returned by %%#requestAnimationFrame|**requestAnimationFrame()**%%.

<htmlexample>
<script>
  var handle1 = requestAnimationFrame(function() {
    console.log('in animation callback 1');
  });

  var handle2 = requestAnimationFrame(function() {
    console.log('in animation callback 2');
  });

  cancelAnimationFrame(handle1);
</script>
</htmlexample>

----
prototype.setInterval(callback : Function, [timeout : Number, [...]]) : Number

Schedules **callback** to be called repeatedly, every **timeout** milliseconds. 
Any extra parameters after **timeout** are passed to **callback**.

Returns a unique handle that can be passed to %%#clearInterval|**clearInterval()**%% 
to stop **callback** from being called.

See also %%#setTimeout|**setTimeout()**%% and %%#requestAnimationFrame|**requestAnimationFrame()**%%.

<htmlexample>
<script>
  var callCount = 0;

  var handle = setInterval(function(parameter1, parameter2) {
    console.log('in callback count=' + callCount);
    console.log('  parameter1=' + parameter1);
    console.log('  parameter2=' + parameter2);
    
    callCount++;
    if (callCount === 5) {
      clearInterval(handle);
    }
  }, 500, 'foo', 'bar');
</script>
</htmlexample>


----
prototype.setInterval(callback : String, [timeout : Number, [...]]) : Number

Same as %%#setInterval_Function_Number_dotdotdot|setInterval()%% where the 
**callback** string is passed to %%/Global#eval|eval%% when the time has elapsed.

----
prototype.clearInterval(handle : Number) : undefined

Stops an %%#setInterval|**setInterval()**%% callback from running.  
**handle** is the value returned by **setInterval()**.

<htmlexample>
<script>
  var callCount = 0;

  var handle = setInterval(function(parameter1, parameter2) {
    console.log('in callback count=' + callCount);
    console.log('  parameter1=' + parameter1);
    console.log('  parameter2=' + parameter2);
    
    callCount++;
    if (callCount === 5) {
      clearInterval(handle);
    }
  }, 500, 'foo', 'bar');
</script>
</htmlexample>



----
prototype.close() : undefined


----
prototype.stop() : undefined


----
prototype.focus() : undefined



----
prototype.blur() : undefined


----
instance.frames : Window

ReadOnly:
true

----
instance.length : Number

ReadOnly:
true

----
instance.top : Window

ReadOnly:
true

----
instance.opener : Window


----
instance.parent : Window


ReadOnly:
true

----
instance.frameElement : Element

ReadOnly:
true

----
prototype.open([url : String, [target = '_blank' : String, [features : String, [replace : Boolean]]]]) : Window

Opens the specified **url**.

<html>
<dl>
<dt>
**url**
<dd>
the url to open.


<dt>
**target**
<dd>
must be one of:
  **'_blank'** (open in new window, the default),
  **'_parent'** (open in parent page/frame),
  **'_self'** (open in current page/frame),
  **'_top'** (open in top page),
  **'&lt;name&gt;'** (open in the window with the specified name).

<dt>
**features**
<dd>
is a comma separated list of **'&lt;name&gt;=&lt;value&gt;'** pairs where the
valid names are **'left'**, **'top'**, **'height'**, **'width'**.

<dt>
**replace**
<dd>
pass **true** to replace the contents instead of opening a new window.
</dl>
</html>


----
instance.external : External


ReadOnly:
true

----
instance.applicationCache : ApplicationCache


ReadOnly:
true

----
prototype.alert(message : String) : undefined

Displays a message box to the user with the specified message.

Script execution is paused while the message box is displayed.

See also 
%%#confirm|**confirm()**%% 
and 
%%#prompt|**prompt()**%%.

<htmlexample>
<button onclick="alert('In alert')">Show alert</button>
</htmlexample>

----
prototype.confirm(message : String) : Boolean

Displays an Ok/Cancel message box to the user with the specified message.
Returns **true** if the user clicked Ok. 

Script execution is paused while the message box is displayed.

See also 
%%#alert|**alert()**%% 
and 
%%#prompt|**prompt()**%%.

<htmlexample>
<button onclick="showConfirm()">Show confirm</button>
<script>
  var showConfirm = function() {
    if (confirm('In confirm')) {
      console.log('user clicked ok');
    }
    else {
      console.log('user clicked cancel');
    }
  };
</script>
</htmlexample>

----
prototype.prompt(message : String, [default : String]) : String

Displays a message box containing an input box to the user with 
the specified message. The input box will be prepopulated with
**default** if it is specified.

Returns the String the user typed in the input box if the user clicks
ok and **null** if they click cancel.

Script execution is paused while the message box is displayed.

See also 
%%#alert|**alert()**%% 
and 
%%#confirm|**confirm()**%%.

<htmlexample>
<button onclick="showPrompt()">Show prompt</button>
<script>
  var showPrompt = function() {
    var result = prompt('In prompt', 'With default');

    if (result !== null) {
      console.log('prompt returned "' + result + '"');
    }
    else {
      console.log('user clicked cancel');
    }
  };
</script>
</htmlexample>

----
prototype.print() : undefined


----
prototype.showModalDialog(url : String, [arguments : Object]) : Object


----
prototype.getComputedStyle(element : Element, [pseudoElement : String]) : CSSStyleDeclaration

Computes the effective style for **element** including all CSS rules that
apply to **element**. See also %%/HTMLElement#style|**element.style**%%.

<htmlexample>
<style>
  .bar { font-weight: bold;  }
</style>
<span id='foo' class='bar' style='color: red'>foo</span>
<script>
  var foo = document.getElementById('foo');

  console.log('color:  ' + foo.style.color);
  console.log('weight: ' + foo.style.fontWeight);

  var computedStyle = window.getComputedStyle(foo);
  console.log('computed color:  ' + computedStyle.color);
  console.log('computed weight: ' + computedStyle.fontWeight);
</script>
</htmlexample>

Spec:
http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSview-getComputedStyle


----
event.abort : listener(event : Event) : undefined
----
event.afterprint : listener(event : Event) : undefined
----
event.beforeprint : listener(event : Event) : undefined
----
event.beforeunload : listener(event : BeforeUnloadEvent) : String

Called before the page is navigated away from.  Return a non-empty 
String from **listener** to display a dialog box that gives the user 
the option to remain on the current page.

<htmlexample>
<button onclick="addBeforeunload()">Add onbeforeunload callback</button><br>
<a href="http://www.javascripture.com">Click to leave</a>
<script>
  var addBeforeunload = function() {
    window.onbeforeunload = function() {
      return 'Returned by onbeforeunload';
    };
  }
</script>
</htmlexample>

----
event.blur : listener(event : Event) : undefined
----
event.canplay : listener(event : Event) : undefined
----
event.canplaythrough : listener(event : Event) : undefined
----
event.change : listener(event : Event) : undefined
----
event.click : listener(event : Event) : undefined
----
event.contextmenu : listener(event : Event) : undefined
----
event.cuechange : listener(event : Event) : undefined
----
event.dblclick : listener(event : Event) : undefined
----
event.drag : listener(event : Event) : undefined
----
event.dragend : listener(event : Event) : undefined
----
event.dragenter : listener(event : Event) : undefined
----
event.dragleave : listener(event : Event) : undefined
----
event.dragover : listener(event : Event) : undefined
----
event.dragstart : listener(event : Event) : undefined
----
event.drop : listener(event : Event) : undefined
----
event.durationchange : listener(event : Event) : undefined
----
event.emptied : listener(event : Event) : undefined
----
event.ended : listener(event : Event) : undefined
----
event.error : listener(event : Event, source : String, line : Number, column : Number) : undefined
----
event.focus : listener(event : Event) : undefined
----
event.hashchange : listener(event : HashChangeEvent) : undefined

Fired when the **'#'** portion of the url changes.  See also
%%/Location#hash|**location.hash**%%.

<htmlexample>
<a id='foo' href='#bar'>Go to #bar</a>
<div style='height: 1000px'></div>
<a id='bar' href='#foo'>Go to #foo</a>

<script>
  window.onhashchange = function(event) {
    console.log('oldURL: ' + event.oldURL);
    console.log('newURL: ' + event.newURL);
  };

</script>
</htmlexample>

----
event.input : listener(event : Event) : undefined
----
event.invalid : listener(event : Event) : undefined
----
event.keydown : listener(event : Event) : undefined
----
event.keypress : listener(event : Event) : undefined
----
event.keyup : listener(event : Event) : undefined
----
event.load : listener(event : Event) : undefined
----
event.loadeddata : listener(event : Event) : undefined
----
event.loadedmetadata : listener(event : Event) : undefined
----
event.loadstart : listener(event : Event) : undefined
----
event.message : listener(event : Event) : undefined
----
event.mousedown : listener(event : Event) : undefined
----
event.mousemove : listener(event : Event) : undefined
----
event.mouseout : listener(event : Event) : undefined
----
event.mouseover : listener(event : Event) : undefined
----
event.mouseup : listener(event : Event) : undefined
----
event.mousewheel : listener(event : Event) : undefined
----
event.offline : listener(event : Event) : undefined
----
event.online : listener(event : Event) : undefined
----
event.pause : listener(event : Event) : undefined
----
event.play : listener(event : Event) : undefined
----
event.playing : listener(event : Event) : undefined
----
event.pagehide : listener(event : Event) : undefined
----
event.pageshow : listener(event : Event) : undefined
----
event.popstate : listener(event : PopStateEvent) : undefined

Called when the page navigation changes.  See also %%/History|History%%.

Spec:
http://www.whatwg.org/specs/web-apps/current-work/#handler-window-onpopstate

----
event.progress : listener(event : Event) : undefined
----
event.ratechange : listener(event : Event) : undefined
----
event.reset : listener(event : Event) : undefined
----
event.resize : listener(event : Event) : undefined
----
event.scroll : listener(event : Event) : undefined
----
event.seeked : listener(event : Event) : undefined
----
event.seeking : listener(event : Event) : undefined
----
event.select : listener(event : Event) : undefined
----
event.show : listener(event : Event) : undefined
----
event.stalled : listener(event : Event) : undefined
----
event.storage : listener(event : Event) : undefined
----
event.submit : listener(event : Event) : undefined
----
event.suspend : listener(event : Event) : undefined
----
event.timeupdate : listener(event : Event) : undefined
----
event.unload : listener(event : Event) : undefined
----
event.volumechange : listener(event : Event) : undefined
----
event.storage : listener(event : StorageEvent) : undefined

