Document : Node

Spec:
http://dvcs.w3.org/hg/domcore/raw-file/tip/Overview.html#interface-document

AlternateSpec:
http://dev.w3.org/html5/spec/single-page.html#document

----
instance.body : HTMLBodyElement

----
instance.cookie : String

Returns the cookies sent to the server when requesting resources.
You can add additional cookies by setting **'key=value'** strings
to **cookie**.  This will replace any existing value for the specified 
cookie but will not affect other cookies. You may append additional metadata
for the cookie by adding **';metadata-key1=metadata-value1;metadata-key2=metadata-value2;...'**
to the end of the string when setting the cookie.  See
%%http://www.ietf.org/rfc/rfc2965.txt|Set Cookie Syntax (on page 5)%% for more 
details on the supported metadata keys and values.

<htmlexample>
<script>
  var getCookies = function() {
    if (document.cookie.length === 0) {
      return {};
    }

    // Split on ';' followed by spaces
    var pairs = document.cookie.split(/;\s*/g);

    pairs = pairs.map(function(pair) {
      return pair.split('=');
    });

    return pairs.reduce(function(object, pair) {
      object[pair[0]] = pair[1];
      return object;
    }, {});
  };

  var clearCookies = function() {
    var cookies = getCookies();
    for (var key in cookies) {
      // Remove a cookie by setting its expires time in the past
      document.cookie = key + '=;expires=' + new Date(0).toUTCString();
    }
  };

  clearCookies();

  document.cookie = 'MyCookie=ChocolateChip';
  console.log(document.cookie);

  document.cookie = 'MyIceCream=Mint';
  console.log(document.cookie);

  var cookies = getCookies();
  console.dir(cookies)
</script>
</htmlexample>

Spec:
http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-8747038

----
instance.title : String

Sets the title of the window.

<htmlexample>
<button onclick="setTitle()">Set Title</button>
<script>
  var setTitle = function() {
    // Grab the parent of the example (ie, the 
    // www.javascripture.com window) and set its title.
    var javascriptureWindow = window.parent;
    javascriptureWindow.document.title = 'foo';
  }
</script>
</htmlexample>

----
instance.activeElement : Element

Returns the currently focused element. If there is no focused element,
returns %%#body|**this.body**%%.

See also 
%%/hasFocus|**hasFocus()**%%,
%%/Window#onblur|**window.onblur**%%, and 
%%/Window#onfocus|**window.onfocus**%%.

<htmlexample>
<!-- Try tabbing around the elements in the example -->
<input value='input 1'><br>
<button>button</button><br>
<input value='input 3'>
<div>
  activeElement: <span id='activeElement'></span>
</div>
<script>
  var activeElementOutput = document.getElementById('activeElement');

  var onFocusChange = function() {
    activeElementOutput.textContent = document.activeElement.tagName;
  };

  window.addEventListener('focus', onFocusChange, true);
  window.addEventListener('blur', onFocusChange, true);
</script>
</htmlexample>


----
instance.readyState : String

Returns 
**'loading'** while **this** is loading, 
**'interactive'** when **this** has loaded but not all subresources are loaded, 
and 
**'complete'** once **this** and all subresources are loaded.

<htmlexample>
<script>
  console.log('in script: ' + document.readyState);

  window.addEventListener('DOMContentLoaded', function() {
    console.log('in DOMContentLoaded: ' + document.readyState);
  });

  window.onload = function() {
    console.log('in onload: ' + document.readyState);
  };
</script>
</htmlexample>

----
instance.implementation : DOMImplementation

Spec:
http://dvcs.w3.org/hg/domcore/raw-file/tip/Overview.html#dom-document-implementation

ReadOnly:
true

----
instance.URL : String

----
instance.documentURI : String

<htmlexample>
<script>
  console.log(document.URL);
</script>
</htmlexample>

Spec:
http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#Document3-documentURI

----
instance.styleSheets : StyleSheetList


----
instance.compatMode : String

----
instance.characterSet : String


----
instance.contentType : String

----
instance.doctype : DocumentType


Spec:
http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-B63ED1A31

ReadOnly:
true

----
instance.documentElement : Element

Usually a %%/HTMLHtmlElement|**HTMLHtmlElement**%%.

Spec:
http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-87CD092

ReadOnly:
true


----
prototype.append(node0 : Node, [node1 : Node, [...]]) : undefined

----
prototype.adoptNode(source : Node) : Node

Spec:
http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#Document3-adoptNode


----
prototype.createEvent(eventInterfaceName : String) : Event


----
prototype.createRange() : Range

----
prototype.createNodeIterator(root : Node, [whatToShow : Number, [filter : NodeFilter]]) : NodeIterator

----
prototype.createTreeWalker(root : Node, [whatToShow : Number, [filter : NodeFilter]]) : TreeWalker

----
prototype.createElement(tagName : String, [typeExtension : String]) : Element

Spec:
http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-2141741547

----
prototype.createElementNS(namespaceURI : String, qualifiedName : String, [typeExtension : String]) : Element

Spec:
http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-DocCrElNS


----
prototype.createDocumentFragment() : DocumentFragment


Spec:
http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-35CB04B5


----
prototype.createTextNode(data : String) : Text


Spec:
http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-1975348127


----
prototype.createComment(data : String) : Comment


Spec:
http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-1334481328


----
prototype.createProcessingInstruction(target : String, data : String) : ProcessingInstruction


Spec:
http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-135944439



----
prototype.getElementsByTagName(tagname : String) : NodeList

Spec:
http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-A6C9094

----
prototype.getElementsByTagNameNS(namespaceURI : String, localName : String) : NodeList

Spec:
http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-getElBTNNS

----
prototype.getElementsByClassName(classNames : String) : NodeList

----
prototype.getElementById(elementId : String) : Element


Spec:
http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-getElBId




----
prototype.hasFocus() : Boolean

Returns **true** if the document has keyboard focus.
See also 
%%/activeElement|**activeElement**%%,
%%/Window#onblur|**window.onblur**%%, and 
%%/Window#onfocus|**window.onfocus**%%.

<htmlexample>
<!-- Click between this box and example to change focus -->
<input id='input'>
<div>
  Has focus: <span id='hasFocus'></span>
</div>
<script>
  var hasFocusElement = document.getElementById('hasFocus');

  var onFocusChange = function() {
    hasFocusElement.textContent = document.hasFocus();
  };

  window.addEventListener('focus', onFocusChange);
  window.addEventListener('blur', onFocusChange);
</script>
</htmlexample>

----
prototype.importNode(importedNode : Node, deep : Boolean) : Node

Spec:
http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#Core-Document-importNode


----
prototype.prepend(node0 : Node, [node1 : Node, [...]]) : undefined

----
prototype.querySelector(selectors : String) : Element

Returns the first **Element** that matches the CSS selector. 

<htmlexample>
<span id='foo'>foo1</span>
<span class='bar'>
  <span class='baz'>baz1</span>
</span>
<span class='baz'>baz2</span>
<script>
  var foo = document.querySelector('#foo');
  console.log(foo.innerHTML);

  var baz = document.querySelector('.baz');
  console.log(baz.innerHTML);

  var baz2 = document.querySelector('body > .baz');
  console.log(baz2.innerHTML);
</script>
</htmlexample>

Spec:
http://www.w3.org/TR/selectors-api/#queryselector

----
prototype.querySelectorAll(cssSelector : String) : NodeList

Returns a **NodeList** containing the **Element**s in the document that
match the CSS selector. 

<htmlexample>
<span id='foo'>foo1</span>
<span class='bar'>
  <span class='baz'>baz1</span>
</span>
<span class='baz'>baz2</span>
<script>
  var all = document.querySelectorAll('#foo, .baz');
  console.log(all.length);
  for (var i = 0; i < all.length; i++) {
    console.log(all[i].innerHTML);
  };
</script>
</htmlexample>

Spec:
http://www.w3.org/TR/selectors-api/#queryselectorall

----
prototype.registerElement(tagName : String, [ options : {\
  prototype : CustomElementPrototype, \
  extends : String /* The HTML %%/Element#tagName|**tagName**%% of the element to is extending */ \
} ]) : Function

Registers a new custom element type for the specified **tagName**.
**tagName** must have a **'-'** in it.
**options.prototype** allows you to provide a 
%%/Function#prototype|**prototype**%% for the custom elements.

<htmlexample>
<!-- Use name as tag name for HTMLElement derived custom elements -->
<x-my-element>MyElement from HTML</x-my-element>

<!-- Use is=... for other custom elements where tag name is the extends type -->
<button is='x-my-button'>MyButton from HTML</button>

<style>
  /* style HTMLElement derived elements by tag name */
  x-my-element { 
    border: 1px solid green;
  }

  /* style other elements by using the is selector */
  [is='x-my-button'] {
    border: 1px solid blue;
  }
</style>

<script>
  // Register an element derived from HTMLElement
  var myElementPrototype = Object.create(HTMLElement.prototype);

  myElementPrototype.createdCallback = function() {
    // Hook up click listener to set the color to red
    this.addEventListener('click', function(event) {
      event.target.style.color = 'red';
    });
  };

  var MyElement = document.registerElement('x-my-element', {
    prototype: myElementPrototype
  });
  
  // Create an instance via JavaScript
  var myElement = document.createElement('x-my-element');
  myElement.textContent = "MyElement from Code"
  document.body.appendChild(myElement);


  // Register an element derived from HTMLButtonElement
  var myButtonPrototype = Object.create(HTMLButtonElement.prototype);

  myButtonPrototype.createdCallback = function() {
    // Hook up click listener to set the color to red
    this.addEventListener('click', function(event) {
      event.target.style.color = 'red';
    });
  };

  var MyButton = document.registerElement('x-my-button', {
    prototype: myButtonPrototype,
    extends: 'button'
  });

  // Create an instance via JavaScript
  var myButton = document.createElement('button', 'x-my-button');
  myButton.textContent = "MyButton from Code"
  document.body.appendChild(myButton);
</script>
</htmlexample>

----
event.abort : listener(event : Event) : undefined

----
event.load : listener(event : Event) : undefined

----
event.readystatechange : listener(event : Event) : undefined


