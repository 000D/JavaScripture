Set : Object

Sets are a collection of %%/Object|Objects%% where each
object can only appear once in the set.

Iterable:
true

Version:
ECMAScript 6

----
Set() : Set

Same as %%#new_Set|**new Set()**%%.

----
Set(iterable : Object) : Set

Same as %%#new_Set_Object|**new Set(iterable)**%%.

----
new Set() : Set

Creates an empty Set.

<example>
var x = new Set();
x.add(1);
x.add('a');
x.add({ foo: 'bar' });

for (var item of x) {
  console.dir(item);
}
</example>

----
new Set(iterable : Object) : Set

Creates a Set by iterating over **iterable** and adding
each value to the Set.

<example>
var fromArray = new Set([1, '1', { foo: 'bar' }]);

for (var item of fromArray) {
  console.dir(item);
}

var generator = function*() {
  yield 3;
  yield 'javascript';
};

var fromGenerator = new Set(generator());

for (var item of fromGenerator) {
  console.dir(item);
}
</example>

----
instance.size : Number

The number of value in **this**.

<example>
var x = new Set(['a', 'b', 'c']);

console.log(x.size);

x.add('d');

console.log(x.size);

x.clear();

console.log(x.size);
</example>

----
prototype.add(value : Object) : Set

Stores **value** in **this**. If **value** is already stored,
there is no change to the Set.
Returns **this**.

<example>
var x = new Set(['a', 'b', 'c']);

console.log(x.has('a'));
console.log(x.has('d'));

x.add('d');
console.log(x.has('d'));
</example>

----
prototype.clear() : undefined

Clears all values from **this**.

<example>
var x = new Set(['a', 'b', 'c']);

console.log(x.size);

x.clear();

console.log(x.size);
</example>

----
prototype.delete(value : Object) : Boolean

Removes **value* from **this**.
Returns **true** if **value** was in **this** before deleting it.

<example>
var x = new Set(['a', 'b', 'c']);

console.log('size before delete: ' + x.size);
console.log('deleted "a" = ' + x.delete('a'));

console.log('size after delete: ' + x.size);
console.log('deleted "foo" = ' + x.delete('foo'));
</example>

----
prototype.entries() : Iterator

Returns an iterator of the items in **this** where the 
%%Iterator#next|**values**s%% of the iterator are of the form
**[value : %%/Object|Object%%, value : %%/Object|Object%%]** 
(**value** is duplicated twice).

See also %%#keys|**keys()**%% and %%#values|**values()**%%.

<example>
var x = new Set(['a', 'b', 'c']);

// Use for (... of ...) to loop over the iterator
for (var entry of x.entries()) {
  console.dir(entry);
}

// Or access the iterator manually
var entries = x.entries();

console.dir(entries.next());
console.dir(entries.next());
console.dir(entries.next());
console.dir(entries.next());
</example>

----
prototype.forEach(callback(value : Object, key : Object, set : Set) : undefined, [thisArg : Object]) : undefined

Calls **callback** for each value in **this**.

The **Set** passed to **callback** is the **this** of the call to **forEach**.

<example>
var x = new Set(['a', 'b', 'c']);

x.forEach(function(value) {
  console.dir(value);
});
</example>

----
prototype.has(value : Object) : Boolean

Returns **true** if the set contains **value**.

<example>
var x = new Set(['a', 'b', 'c']);

console.log(x.has('a'));
console.log(x.has('foo'));
</example>

----
prototype.keys() : Iterator

Same as %%#values|values()%%.

----
prototype.values() : Iterator

Returns an iterator of the values in **this**.

The **values** function is also returned for 
**this[%%/Symbol#iterator|Symbol.iterator%%]** so you can 
iterate over **this** directly to get the values.

See also %%#entries|**entries()**%% and %%#keys|**keys()**%%.

<example>
var x = new Set(['a', 'b', 'c']);

// values is returned by x[Symbol.iterator] so you can just 
// use x directly in the for (... of ...) loop
for (var value of x) {
  console.dir(value);
}

// You can iterate over values explicitly
for (var value of x.values()) {
  console.dir(value);
}

// Or access the iterator manually
var values = x.values();

console.dir(values.next());
console.dir(values.next());
console.dir(values.next());
console.dir(values.next());
</example>

